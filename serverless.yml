service:
  name: Groups
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack


provider:
  name: aws
  runtime: nodejs12.x

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TABLE: Groups-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
      Resource: !GetAtt GroupsDynamoDbTable.Arn


functions:
  GetGroups:
    handler: src/GetGroups.handler
    events:
      - http:
          method: get
          path: groups
          cors: true
  
  CreateGroup:
    handler: src/CreateGroup.handler
    events:
      - http:
          method: post
          path: groups
          cors: true


resources:
  Resources:
    GroupsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE}

    ImagesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}
